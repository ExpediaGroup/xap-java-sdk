/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceAvgNightlyRate
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceAvgNightlyStrikeOutRate
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceBaseRate
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceHotelMandatoryFees
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceStrikeOutBaseRate
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceStrikeOutHotelMandatoryFees
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceStrikeOutTaxesAndFees
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceTaxesAndFees
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceTotalPrice
import com.expediagroup.sdk.xap.models.RatePlanStandalonePriceTotalStrikeOutPrice
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * The corresponded standalone price to the package rate plan (to show the `strikethrough`).  Only returned when this is a package rate plan.
 * @param baseRate
 * @param strikeOutBaseRate
 * @param taxesAndFees
 * @param strikeOutTaxesAndFees
 * @param totalPrice
 * @param totalStrikeOutPrice
 * @param avgNightlyRate
 * @param avgNightlyStrikeOutRate
 * @param hotelMandatoryFees
 * @param strikeOutHotelMandatoryFees
 */
data class RoomTypeStandalonePrice(
    @JsonProperty("BaseRate")
    @field:Valid
    val baseRate: RatePlanStandalonePriceBaseRate? = null,
    @JsonProperty("StrikeOutBaseRate")
    @field:Valid
    val strikeOutBaseRate: RatePlanStandalonePriceStrikeOutBaseRate? = null,
    @JsonProperty("TaxesAndFees")
    @field:Valid
    val taxesAndFees: RatePlanStandalonePriceTaxesAndFees? = null,
    @JsonProperty("StrikeOutTaxesAndFees")
    @field:Valid
    val strikeOutTaxesAndFees: RatePlanStandalonePriceStrikeOutTaxesAndFees? = null,
    @JsonProperty("TotalPrice")
    @field:Valid
    val totalPrice: RatePlanStandalonePriceTotalPrice? = null,
    @JsonProperty("TotalStrikeOutPrice")
    @field:Valid
    val totalStrikeOutPrice: RatePlanStandalonePriceTotalStrikeOutPrice? = null,
    @JsonProperty("AvgNightlyRate")
    @field:Valid
    val avgNightlyRate: RatePlanStandalonePriceAvgNightlyRate? = null,
    @JsonProperty("AvgNightlyStrikeOutRate")
    @field:Valid
    val avgNightlyStrikeOutRate: RatePlanStandalonePriceAvgNightlyStrikeOutRate? = null,
    @JsonProperty("HotelMandatoryFees")
    @field:Valid
    val hotelMandatoryFees: RatePlanStandalonePriceHotelMandatoryFees? = null,
    @JsonProperty("StrikeOutHotelMandatoryFees")
    @field:Valid
    val strikeOutHotelMandatoryFees: RatePlanStandalonePriceStrikeOutHotelMandatoryFees? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var baseRate: RatePlanStandalonePriceBaseRate? = null,
        private var strikeOutBaseRate: RatePlanStandalonePriceStrikeOutBaseRate? = null,
        private var taxesAndFees: RatePlanStandalonePriceTaxesAndFees? = null,
        private var strikeOutTaxesAndFees: RatePlanStandalonePriceStrikeOutTaxesAndFees? = null,
        private var totalPrice: RatePlanStandalonePriceTotalPrice? = null,
        private var totalStrikeOutPrice: RatePlanStandalonePriceTotalStrikeOutPrice? = null,
        private var avgNightlyRate: RatePlanStandalonePriceAvgNightlyRate? = null,
        private var avgNightlyStrikeOutRate: RatePlanStandalonePriceAvgNightlyStrikeOutRate? = null,
        private var hotelMandatoryFees: RatePlanStandalonePriceHotelMandatoryFees? = null,
        private var strikeOutHotelMandatoryFees: RatePlanStandalonePriceStrikeOutHotelMandatoryFees? = null
    ) {
        fun baseRate(baseRate: RatePlanStandalonePriceBaseRate?) = apply { this.baseRate = baseRate }

        fun strikeOutBaseRate(strikeOutBaseRate: RatePlanStandalonePriceStrikeOutBaseRate?) = apply { this.strikeOutBaseRate = strikeOutBaseRate }

        fun taxesAndFees(taxesAndFees: RatePlanStandalonePriceTaxesAndFees?) = apply { this.taxesAndFees = taxesAndFees }

        fun strikeOutTaxesAndFees(strikeOutTaxesAndFees: RatePlanStandalonePriceStrikeOutTaxesAndFees?) = apply { this.strikeOutTaxesAndFees = strikeOutTaxesAndFees }

        fun totalPrice(totalPrice: RatePlanStandalonePriceTotalPrice?) = apply { this.totalPrice = totalPrice }

        fun totalStrikeOutPrice(totalStrikeOutPrice: RatePlanStandalonePriceTotalStrikeOutPrice?) = apply { this.totalStrikeOutPrice = totalStrikeOutPrice }

        fun avgNightlyRate(avgNightlyRate: RatePlanStandalonePriceAvgNightlyRate?) = apply { this.avgNightlyRate = avgNightlyRate }

        fun avgNightlyStrikeOutRate(avgNightlyStrikeOutRate: RatePlanStandalonePriceAvgNightlyStrikeOutRate?) = apply { this.avgNightlyStrikeOutRate = avgNightlyStrikeOutRate }

        fun hotelMandatoryFees(hotelMandatoryFees: RatePlanStandalonePriceHotelMandatoryFees?) = apply { this.hotelMandatoryFees = hotelMandatoryFees }

        fun strikeOutHotelMandatoryFees(strikeOutHotelMandatoryFees: RatePlanStandalonePriceStrikeOutHotelMandatoryFees?) = apply { this.strikeOutHotelMandatoryFees = strikeOutHotelMandatoryFees }

        fun build(): RoomTypeStandalonePrice {
            return RoomTypeStandalonePrice(
                baseRate = baseRate,
                strikeOutBaseRate = strikeOutBaseRate,
                taxesAndFees = taxesAndFees,
                strikeOutTaxesAndFees = strikeOutTaxesAndFees,
                totalPrice = totalPrice,
                totalStrikeOutPrice = totalStrikeOutPrice,
                avgNightlyRate = avgNightlyRate,
                avgNightlyStrikeOutRate = avgNightlyStrikeOutRate,
                hotelMandatoryFees = hotelMandatoryFees,
                strikeOutHotelMandatoryFees = strikeOutHotelMandatoryFees
            )
        }
    }

    fun toBuilder() =
        Builder(
            baseRate = baseRate,
            strikeOutBaseRate = strikeOutBaseRate,
            taxesAndFees = taxesAndFees,
            strikeOutTaxesAndFees = strikeOutTaxesAndFees,
            totalPrice = totalPrice,
            totalStrikeOutPrice = totalStrikeOutPrice,
            avgNightlyRate = avgNightlyRate,
            avgNightlyStrikeOutRate = avgNightlyStrikeOutRate,
            hotelMandatoryFees = hotelMandatoryFees,
            strikeOutHotelMandatoryFees = strikeOutHotelMandatoryFees
        )
}
