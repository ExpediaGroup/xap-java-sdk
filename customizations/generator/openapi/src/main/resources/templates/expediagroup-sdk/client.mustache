package com.expediagroup.sdk.{{namespace}}.client

import java.util.concurrent.CompletableFuture
import java.util.stream.Collectors
import kotlin.collections.Map.Entry
import kotlinx.coroutines.runBlocking

{{#imports}}
    import {{import}}
{{/imports}}

{{>imports/domain}}

{{>imports/core}}

{{>imports/defaults}}

/**
* {{#openAPI}}{{#info}}{{{description}}}{{/info}}{{/openAPI}}
*/

class {{clientClassname}}Client private constructor(clientConfiguration: XapClientConfiguration) : BaseXapClient("{{namespace}}", clientConfiguration) {
    class Builder : BaseXapClient.Builder<Builder>() {
        override fun build() = {{clientClassname}}Client(
            XapClientConfiguration(key, secret, endpoint, requestTimeout, connectionTimeout, socketTimeout, maskedLoggingHeaders, maskedLoggingBodyFields)
        )
    }

    class BuilderWithHttpClient() : BaseXapClient.BuilderWithHttpClient<BuilderWithHttpClient>() {
        override fun build() : {{clientClassname}}Client {

        if (okHttpClient == null) {
            throw ExpediaGroupConfigurationException(getMissingRequiredConfigurationMessage(ConfigurationName.OKHTTP_CLIENT))
        }

        return {{clientClassname}}Client(
                XapClientConfiguration(key, secret, endpoint, null, null, null, maskedLoggingHeaders, maskedLoggingBodyFields, okHttpClient)
            )
        }
    }

    companion object {
        @JvmStatic fun builder() = Builder()

        @JvmStatic fun builderWithHttpClient() = BuilderWithHttpClient()
    }

    override suspend fun throwServiceException(response: HttpResponse, operationId: String) {
        throw ErrorObjectMapper.process(response, operationId)
    }

    private suspend inline fun <reified RequestType> executeHttpRequest(operation: Operation<RequestType>): HttpResponse {
        return httpClient.request {
            method = HttpMethod.parse(operation.method)
            url(operation.url)

            operation.params?.getHeaders()?.let {
                headers.appendAll(it)
            }

            operation.params?.getQueryParams()?.let {
                url.parameters.appendAll(it)
            }

            val extraHeaders = buildMap {
                put("key", configurationProvider.key ?: "")
            }

            appendHeaders(extraHeaders)
            contentType(ContentType.Application.Json)
            setBody(operation.requestBody)
            exclude(ContentType.Application.Json)
        }
    }

    private inline fun <reified RequestType> executeWithEmptyResponse(operation: Operation<RequestType>) : EmptyResponse {
        try {
            return executeAsyncWithEmptyResponse(operation).get()
        } catch (exception: Exception) {
            exception.handle()
        }
    }

    private inline fun <reified RequestType> executeAsyncWithEmptyResponse(operation: Operation<RequestType>) : CompletableFuture<EmptyResponse> {
        return GlobalScope.future(Dispatchers.IO) {
            try {
                val response = executeHttpRequest(operation)
                throwIfError(response, operation.operationId)
                EmptyResponse(response.status.value, response.headers.entries())

            } catch (exception: Exception) {
                exception.handle()
            }
        }
    }

    private inline fun <reified RequestType, reified ResponseType> execute(operation: Operation<RequestType>) : Response<ResponseType> {
        try {
            return executeAsync<RequestType, ResponseType>(operation).get()
        } catch (exception: Exception) {
            exception.handle()
        }
    }

    private inline fun <reified RequestType, reified ResponseType> executeAsync(operation: Operation<RequestType>) : CompletableFuture<Response<ResponseType>> {
        return GlobalScope.future(Dispatchers.IO) {
            try {
                val response = executeHttpRequest(operation)
                throwIfError(response, operation.operationId)
                Response(response.status.value, response.body<ResponseType>(), response.headers.entries())
            } catch (exception: Exception) {
                exception.handle()
            }
        }
    }

    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
        /**
        * {{{summary}}}
        * {{{notes}}}
        * @param operation [{{operationIdCamelCase}}Operation]
        {{#exceptionDataTypes}}
            {{#dataTypes}}
                * @throws ExpediaGroupApi{{.}}Exception
            {{/dataTypes}}
        {{/exceptionDataTypes}}
        * @return a [Response] object with a body of type {{{returnType}}}{{^returnType}}Nothing{{/returnType}}
        */
        fun execute(operation: {{operationIdCamelCase}}Operation) : {{#returnType}}Response<{{{returnType}}}>{{/returnType}}{{^returnType}}EmptyResponse{{/returnType}} {
            {{#returnType}}
                return execute<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^hasBodyParam}}Nothing{{/hasBodyParam}}, {{{returnType}}}>(operation)
            {{/returnType}}
            {{^returnType}}
                return executeWithEmptyResponse<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^hasBodyParam}}Nothing{{/hasBodyParam}}>(operation)
            {{/returnType}}
        }

        /**
        * {{{summary}}}
        * {{{notes}}}
        * @param operation [{{operationIdCamelCase}}Operation]
        {{#exceptionDataTypes}}
            {{#dataTypes}}
                * @throws ExpediaGroupApi{{.}}Exception
            {{/dataTypes}}
        {{/exceptionDataTypes}}
        * @return a [CompletableFuture<Response>] object with a body of type {{{returnType}}}{{^returnType}}Nothing{{/returnType}}
        */
        fun executeAsync(operation: {{operationIdCamelCase}}Operation) : CompletableFuture<{{#returnType}}Response<{{{returnType}}}>{{/returnType}}{{^returnType}}EmptyResponse{{/returnType}}> {
        {{#returnType}}
            return executeAsync<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^hasBodyParam}}Nothing{{/hasBodyParam}}, {{{returnType}}}>(operation)
        {{/returnType}}
        {{^returnType}}
            return executeAsyncWithEmptyResponse<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^hasBodyParam}}Nothing{{/hasBodyParam}}>(operation)
        {{/returnType}}
        }

        {{#isPaginatable}}
            {{>client/paginatorMethods}}
        {{/isPaginatable}}
    {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
